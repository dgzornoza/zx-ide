# Name of final file (without the extension)
EXEC_OUTPUT=output

# Get .c and .asm source files
SOURCES = $(shell find . \( -name '*.c' -o -name '*.asm' \))
# $(info Cource files to compile: $(SOURCES))

# z88dk library to use values:
# new (compile using sccz80),
# sdcc_iy (compile using sdcc and new library using iy register, recomended when sdcc),
# sdcc_ix (compile using sdcc and new library using ix register),
# set empty to use classic library
#CLIB=#-clib=sdcc_iy

# Set CRT (only new lib)
#CRT=#-startup=31

# You don't need to edit below here, have a happy coding.
# --------------------------------------------------------------------
TOOLCHAIN=zcc
TARGET=+zx
#COMPILER=-compiler=sccz80 #(sccz80,sdcc), default sccz80 if not set
VERBOSITY=-vn #(-v: show verbose, -vn: not show verbose)
OUT_DIR=build
PRAGMA_FILE=zpragma.inc
CREATE_SNA=-Cz"--sna"
MKDIR=mkdir -p
#DEBUG=#-debug

# OBJECTS=$(SOURCES:.*=.o)
# $(info Archivos objeto1: $(OBJECTS))

#SDCC_OPT_FLAGS=-SO3 --opt-code-size #(sdcc options)
#SCCZ80_OPT_FLAGS=#-O3 #-SO3 --opt-code-size #(sccz80 options)
# con newLib se pueden usar SDCC_OPT_FLAGS en cualquier compilador para optimziar
#C_OPT_FLAGS=$(SCCZ80_OPT_FLAGS)

# optimizacion compilacion
#sdcc: 130 (-SO3 --opt-code-size), 132 (vacio)
#sccz80: 211 (-O3), 212 (vacio), 212 (-SO3 --opt-code-size)
#sdcc newlib: 148 (-SO3 --opt-code-size), 170 (vacio)
#sccz80 newlib: 148 (-SO3 --opt-code-size), 170 (vacio)


#CFLAGS=$(TARGET) $(VERBOSITY) -c $(C_OPT_FLAGS) -compiler=sdcc $(CLIB) -pragma-include:$(PRAGMA_FILE)
#ASFLAGS=$(TARGET) $(VERBOSITY) --list -m -s -c
#LDFLAGS=$(TARGET) $(VERBOSITY) --list -m --c-code-in-asm $(CLIB) -pragma-include:$(PRAGMA_FILE) $(CREATE_SNA)

LDFLAGS=$(TARGET) $(VERBOSITY) $(C_OPT_FLAGS) $(DEBUG) --list -m -s --c-code-in-asm $(COMPILER) $(CLIB) -pragma-include:$(PRAGMA_FILE) $(CREATE_SNA)


EXEC=$(OUT_DIR)/$(EXEC_OUTPUT).tap
MEM_FREE_SCRIPT=./scripts/memory_report.sh
JOIN_LIS_SCRIPT=./scripts/join_lis_files.sh

# %.o: %.c $(PRAGMA_FILE)
# 	$(COMPILER) $(CFLAGS) -o $@ $<

# %.o: %.asm
# 	$(AS) $(ASFLAGS) -o $@ $<

# rule for building the project
all : clean $(EXEC) join_lis show_report

# rule for compile and create executable
$(EXEC) : $(SOURCES)
	@echo "Compiling ..."
	$(TOOLCHAIN) $(LDFLAGS) $(CRT) $(SOURCES) -o $(OUT_DIR)/$(EXEC_OUTPUT) -create-app
	@echo "Compilation finished, output build in '$(EXEC)'"
	@echo

# rule for cleaning output files
.PHONY: clean
clean:
	@echo "Clean workspace."
	rm -rf $(OUT_DIR) /tmp/tmpXX*
	find . \( -name "*.lis" -o -name "*.sym" -o -name "*.o" \) -type f -exec rm -f {} +
	$(MKDIR) $(OUT_DIR)
	@echo

# rule for execute script for join lis files
.PHONY: join_lis
join_lis:
	sh $(JOIN_LIS_SCRIPT) ./src ./src/main.c.lis

# rule for execute script to show memory report
.PHONY: show_report
show_report:
	sh $(MEM_FREE_SCRIPT) ./$(OUT_DIR)/$(EXEC_OUTPUT).map


